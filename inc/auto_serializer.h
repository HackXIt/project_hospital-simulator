/********************************************************************

       IMPORTANT: AUTO-GENERATED FILE - DO NOT EDIT!                 

 Generated by: cser-1.0.0
 Command line: -o hospital_structures_serializer -b raw -i inc/hospital_structures.h -v ListPersons_t Person_t ListRows_t Seat_t 

********************************************************************/

#ifndef _hospital_structures_serializer_h_
#define _hospital_structures_serializer_h_
#include "hospital_structures.h"
#include <stdint.h>
#include <stdlib.h>
#include <sys/types.h>
#include <errno.h>
#include <string.h>

/* The callback functions take a buffer, a length, and an opaque */
/* pointer which is passed through. They MUST return zero (0) on */
/* success. Any non-zero value is treated as an error and bubbled*/
/* back up to the caller. Note that "short" reads and writes   */
/* are NOT used or supported in this interface, unlike that of   */
/* read(2)/write(2).                                             */
typedef int (*cser_raw_write_fn)(const uint8_t *bytes, size_t n, void *q);
typedef int (*cser_raw_read_fn)(uint8_t *bytes, size_t n, void *q);

int cser_raw_store_struct_ListRows(const struct ListRows *val, cser_raw_write_fn w, void *q);
int cser_raw_load_struct_ListRows(struct ListRows *val, cser_raw_read_fn r, void *q);
int cser_raw_store_struct_ListPersons(const struct ListPersons *val, cser_raw_write_fn w, void *q);
int cser_raw_load_struct_ListPersons(struct ListPersons *val, cser_raw_read_fn r, void *q);
int cser_raw_store_struct_Seat(const struct Seat *val, cser_raw_write_fn w, void *q);
int cser_raw_load_struct_Seat(struct Seat *val, cser_raw_read_fn r, void *q);
int cser_raw_store_struct_Person(const struct Person *val, cser_raw_write_fn w, void *q);
int cser_raw_load_struct_Person(struct Person *val, cser_raw_read_fn r, void *q);
int cser_raw_store_struct_node_s(const struct node_s *val, cser_raw_write_fn w, void *q);
int cser_raw_load_struct_node_s(struct node_s *val, cser_raw_read_fn r, void *q);
int cser_raw_store_struct_node_p(const struct node_p *val, cser_raw_write_fn w, void *q);
int cser_raw_load_struct_node_p(struct node_p *val, cser_raw_read_fn r, void *q);
int cser_raw_store_unsigned_short(const unsigned short *val, cser_raw_write_fn w, void *q);
int cser_raw_load_unsigned_short(unsigned short *val, cser_raw_read_fn r, void *q);
int cser_raw_store_char(const char *val, cser_raw_write_fn w, void *q);
int cser_raw_load_char(char *val, cser_raw_read_fn r, void *q);
static inline int cser_raw_store_ListRows_t(const ListRows_t *val, cser_raw_write_fn w, void *q)
{
	return cser_raw_store_struct_ListRows(val, w, q);
}
static inline int cser_raw_store_ListPersons_t(const ListPersons_t *val, cser_raw_write_fn w, void *q)
{
	return cser_raw_store_struct_ListPersons(val, w, q);
}
static inline int cser_raw_store_Seat_t(const Seat_t *val, cser_raw_write_fn w, void *q)
{
	return cser_raw_store_struct_Seat(val, w, q);
}
static inline int cser_raw_store_Person_t(const Person_t *val, cser_raw_write_fn w, void *q)
{
	return cser_raw_store_struct_Person(val, w, q);
}
#endif
